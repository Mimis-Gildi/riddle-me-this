name: Introspect Runner
description: "Outputs whether we're running on self-hosted infra or a hosted GitHub runner"
author: "VK (rdd13r)"
branding:
  icon: "server"
  color: "red"

inputs:
  validate-sdks:
    description: "Should SDKs expected in the Runner User environment be validated?"
    required: false
    default: "true"
  sdkman-version:
    description: "The version of SDKMAN to use"
    required: false
    default: "5.15.0"
  sdkman-native:
    description: "The native daemon library of the SDK Manager (architecture specific)"
    required: false
    default: "0.7.11"

outputs:
  sdkman:
    description: "true if SDKMAN is present in expected version"
    value: ${{ steps.introspect.outputs.sdkman }}
  sdkman-version:
    description: "The version of SDKMAN reported at the Runner User"
    value: ${{ steps.introspect.outputs.sdkman-version }}
  sdkman-native:
    description: "The reported native daemon library of the SDK Manager"
    value: ${{ steps.introspect.outputs.sdkman-native }}
  sdkman-matches:
    description: "true if SDKMAN version and native daemon library match"
    value: ${{ steps.introspect.outputs.sdkman-matches }}
  sdks-all-match:
    description: "true if all SDKs match"
    value: ${{ steps.introspect.outputs.sdks-all-match }}
  sdks-have-missing:
    description: "true if any SDKs are missing"
    value: ${{ steps.introspect.outputs.sdks-have-missing }}
  missing-sdks:
    description: "Space-separated list of missing SDKs"
    value: ${{ steps.introspect.outputs.missing-sdks }}
  added-sdks:
    description: "Space-separated list of added SDKs"
    value: ${{ steps.introspect.outputs.added-sdks }}
  mismatched-sdks:
    description: "Space-separated list of mismatched SDKs"
    value: ${{ steps.introspect.outputs.mismatched-sdks }}

runs:
  using: "composite"

  steps:

    - id: introspect
      name: Introspect the Runner User Setup
      shell: zsh -l {0}
      run: |
        source "$SDKMAN_DIR/bin/sdkman-init.sh" || true
        source $HOME/miniforge3/bin/activate ml || true

        ### Status Flags
        sdk_present="true"
        sdk_correct="true"
        sdks_match="true"
        sdks_missing="false"

        ### Actual Versions
        typeset -A actual_sdks
        typeset -a missing_sdks
        typeset -a added_sdks
        typeset -a sdk_wrong_version
        typeset -A actual_ruby
        typeset -A actual_python
        script_version=""
        native_version=""
        
        # Commands
        validate_candidates="${{ inputs.validate-sdks }}"
        
        ### Expected Versions
        expected_sdk_version="${{ inputs.sdkman-version }}"
        expected_native_version="${{ inputs.sdkman-native }}"
        typeset -A expected_sdks=(
          java   "21.0.7-tem"
          gradle "8.14.2"
          kotlin "2.1.21"
          sbt    "1.11.2"
          scala  "3.7.1"
          boola  "3.9.4"
        )
        expected_ruby_version="3.3.5"
        expected_gems_version="3.5.16"
        expected_bundler_version="2.5.16"
        expected_conda_version="25.3.0"
        expected_mamba_version="2.0.5"
        expected_python_version="3.11.8"

        
        ### Test for SDKs        
        # SDKMAN?
        if sdk_version=$(sdk version 2>/dev/null); then
          script_version=$(echo "$sdk_version" | awk '/^script:/ { print $2 }')
          native_version=$(echo "$sdk_version" | awk '/^native:/ { print $2 }')
          echo "sdkman-version=$script_version" >> $GITHUB_OUTPUT
          echo "sdkman-native=$native_version" >> $GITHUB_OUTPUT
          if [[ "$script_version" != "$expected_sdk_version" || "$native_version" != "$expected_native_version" ]]; then
            sdk_correct=false
          fi
        else
          sdk_present=false
        fi

        # sdk Candidates
        if [[ "true" == "$validate_candidates"  && "true" == "$sdk_present" ]]; then
        
          # Collect Current Candidates
          sdk current 2>/dev/null | tail -n +2 | while read -r candidate version _; do
            [[ -z "$candidate" || -z "$version" ]] && continue
            candidate="${candidate// /}"
            version="${version// /}"
            actual_sdks[$candidate]="$version"
          done
        fi
        
        # Validate Candidates
        if [[ "true" == "$validate_candidates"  && "true" == "$sdk_present" && 0 -le "${#actual_sdks[@]}" ]]; then
          for key in ${(k)expected_sdks}; do
            expected="${expected_sdks[$key]}"
            actual="${actual_sdks[$key]:-MISSING}"
            if [[ "$actual" == "MISSING" ]]; then
              missing_sdks+=("$key")
              sdks_match="false"
              sdks_missing="true"
            elif [[ "${actual:-}" != "${expected:-}" ]]; then
              sdks_match="false"
              sdk_wrong_version+=("$key expecting $expected and got $actual")
            else
              echo "okay - ${key}"
            fi
          done
        fi

        for key in ${(k)actual_sdks}; do
          if [[ -z "${expected_sdks[$key]:-}" ]]; then
            added_sdks+=($key)
          fi
        done

        {
          echo "sdkman=$sdk_present"
          echo "sdkman-version=$script_version"
          echo "sdkman-native=$native_version"
          echo "sdkman-matches=$sdk_correct"
          echo "sdks-all-match=$sdks_match"
          echo "sdks-have-missing=$sdks_missing"
          echo "missing-sdks=${sdk_missing[*]}"
          echo "added-sdks=${added_sdks[*]}"
          echo "mismatched-sdks=${sdk_wrong_version[*]}"
        } >> $GITHUB_OUTPUT
        
        ### Ruby Toolchain Validation
        # Ruby toolchain validation
        actual_ruby_version=$(ruby --version 2>/dev/null | awk '{print $2}')
        actual_gems_version=$(gem --version 2>/dev/null)
        actual_bundler_version=$(bundle --version 2>/dev/null | awk '{print $3}')
        
        if [[ "$actual_ruby_version" != "$expected_ruby_version" ]]; then
          sdk_wrong_version+=("ruby expecting $expected_ruby_version and got ${actual_ruby_version:-MISSING}")
          sdks_match="false"
        fi
        if [[ "$actual_gems_version" != "$expected_gems_version" ]]; then
          sdk_wrong_version+=("rubygems expecting $expected_gems_version and got ${actual_gems_version:-MISSING}")
          sdks_match="false"
        fi
        if [[ "$actual_bundler_version" != "$expected_bundler_version" ]]; then
          sdk_wrong_version+=("bundler expecting $expected_bundler_version and got ${actual_bundler_version:-MISSING}")
          sdks_match="false"
        fi

        ### Conda environment validation
        actual_conda_version=$(conda --version 2>/dev/null | awk '{print $2}')
        actual_mamba_version=$(mamba --version 2>/dev/null | awk '{print $2}')
        actual_python_version=$(python --version 2>/dev/null | awk '{print $2}')

        if [[ "$actual_conda_version" != "$expected_conda_version" ]]; then
          sdk_wrong_version+=("conda expecting $expected_conda_version and got ${actual_conda_version:-MISSING}")
          sdks_match="false"
        fi
        if [[ "$actual_mamba_version" != "$expected_mamba_version" ]]; then
          sdk_wrong_version+=("mamba expecting $expected_mamba_version and got ${actual_mamba_version:-MISSING}")
          sdks_match="false"
        fi
        if [[ "$actual_python_version" != "$expected_python_version" ]]; then
          sdk_wrong_version+=("python expecting $expected_python_version and got ${actual_python_version:-MISSING}")
          sdks_match="false"
        fi
