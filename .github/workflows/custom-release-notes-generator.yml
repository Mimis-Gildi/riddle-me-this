name: Idempotent Release Notes Generator

run-name: "Generated or Updated Release Notes on ${{ github.repository }} by ${{ github.actor }} (${{ github.event_name }})"

on:
  workflow_call:
  workflow_dispatch:
  pull_request:
  push:
    branches-ignore:
      - main

permissions:
  contents: write

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}-release-notes-generator"
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:

  detect-and-seed:
    name: Detect Versions, Seed File, Inject Data
    runs-on: ubuntu-latest

    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4.2.2

      - name: Extract Target Version from gradle.properties of this feature
        id: this-version
        run: |
          VERSION=$(grep '^version=' gradle.properties | cut -d'=' -f2)
          echo "value=$VERSION" >> $GITHUB_OUTPUT
          echo "::notice title=Detected Target Version::$VERSION"

      - name: Determine Prior Version (if any)
        id: prior-tag
        run: |
          git fetch --tags
          PREV=$(git tag --sort=-v:refname | grep '^v' | grep -v "v${{ steps.this-version.outputs.value }}" | head -n 1 || echo "")
          echo "value=$PREV" >> $GITHUB_OUTPUT
          echo "::notice title=Detected Prior Version::$PREV"

      - name: Check and Seed Release Notes File
        id: seed-new
        run: |
          FILE="releases/v${{ steps.this-version.outputs.value }}.md"
          if [[ -f "$FILE" ]]; then
            echo "created=false" >> $GITHUB_OUTPUT
            echo "::notice title=Release Notes File Exists::$FILE"
          else
            mkdir -p releases
            {
              echo "# Release v${{ steps.this-version.outputs.value }}"
              echo ""
              echo "## ‚ú® What's New"
              echo "- TBD"
              echo ""
              echo "## üêõ Bug Fixes"
              echo "- TBD"
              echo ""
              echo "## üî¨ Internal"
              echo "- TBD"
              echo ""
              echo "---"
              echo "## Logs"
              echo ""
              echo "## Files"
              echo ""
            } > "$FILE"
            echo "created=true" >> $GITHUB_OUTPUT
            echo "::notice title=Release Notes File Seeded::$FILE"
          fi

      - name: Commit New Release Notes File (if created)
        if: steps.seed-new.outputs.created == 'true'
        uses: ./.github/actions/release-notes-commit
        with:
          version: ${{ steps.this-version.outputs.value }}
          message: "üìù Seed release notes for v${{ steps.this-version.outputs.value }}"

      - name: Extract Commit Messages
        id: commits
        run: |
          PREV_TAG="${{ steps.prior-tag.outputs.value }}"
          if [ -z "$PREV_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" "$PREV_TAG"..HEAD)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          for COMMIT in $COMMITS; do
            echo "$COMMIT"
          done >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract Changed Files
        id: files
        run: |
          PREV_TAG="${{ steps.prior-tag.outputs.value }}"
          if [ -z "$PREV_TAG" ]; then
            FILES=$(git ls-files)
          else
            FILES=$(git diff --name-only "$PREV_TAG"..HEAD)
          fi
          echo "files<<EOF" >> $GITHUB_OUTPUT
          for FILE in $FILES; do
            echo "$FILE"
          done >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Write Logs and Files into Release Notes
        run: |
          FILE="releases/v${{ steps.this-version.outputs.value }}.md"
          awk '/^---/ { exit } { print }' "$FILE" > "$FILE.new"
      
          echo "---" >> "$FILE.new"
          echo "## Logs" >> "$FILE.new"
          while IFS= read -r line; do
            echo "- $line" >> "$FILE.new"
          done <<< "${{ steps.commits.outputs.commits }}"
      
          echo "## Files" >> "$FILE.new"
          while IFS= read -r file; do
            echo "- $file" >> "$FILE.new"
          done <<< "${{ steps.files.outputs.files }}"
      
          mv "$FILE.new" "$FILE"

      - name: Commit Injection File
        uses: ./.github/actions/release-notes-commit
        with:
          version: ${{ steps.this-version.outputs.value }}
          message: "üìù Inject commits into release notes v${{ steps.this-version.outputs.value }}"